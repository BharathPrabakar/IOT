Traffic Light
Copy Code
import RPi.GPIO as GPIO
from time import sleep

GPIO.setwarnings(False)
GPIO.setmode(GPIO.BOARD)

GPIO.setup(3, GPIO.OUT)
GPIO.setup(5, GPIO.OUT)
GPIO.setup(11, GPIO.OUT)

while True:
    GPIO.output(3, GPIO.HIGH)
    sleep(2)
    GPIO.output(3, GPIO.LOW)
    sleep(1)
    GPIO.output(5, GPIO.HIGH)
    sleep(2)
    GPIO.output(5, GPIO.LOW)
    sleep(1)
    GPIO.output(11, GPIO.HIGH)
    sleep(2)
    GPIO.output(11, GPIO.LOW)
    sleep(1)
            

Ultrasonic with Thinkspeak(Write)
Copy Code
import time
import urllib.request
import RPi.GPIO as GPIO

trig = 2
echo = 4
Thing = "https://api.thingspeak.com/update?api_key=Your_Api_Key"

GPIO.setwarnings(False)
GPIO.setmode(GPIO.BCM)
GPIO.setup(trig, GPIO.OUT)
GPIO.setup(echo, GPIO.IN)

def read_distance():
    GPIO.output(trig, True)
    time.sleep(1)
    GPIO.output(trig, False)
    pulse_st = time.time()
    while GPIO.input(echo) == 0:
        pulse_st = time.time()
    pulse_end = time.time()
    while GPIO.input(echo) == 1:
        pulse_end = time.time()
    pulse_dur = pulse_end - pulse_st
    distance = pulse_dur * 17150
    distance = round(distance, 2)
    return distance

while True:
    distance = read_distance()
    print(distance)
    url = Thing + '&field1={:.2f}'.format(distance)
    urllib.request.urlopen(url)
    time.sleep(1)
            

Ultrasonic with Thinkspeak(Read)
Copy Code
import requests
import RPi.GPIO as gp
gp.setwarnings(False)

url = "https://api.thingspeak.com/channels/Channel_Id/feeds.json"
response = requests.get(url, verify=False)

data = response.json()
print("Data from the ThingSpeak.com using Read API:")
feeds = data.get('feeds', [])
for entry in feeds:
    field1 = entry.get("field1")
    print(field1)


WebPage Traffic Control
Copy Code
<html>
<head>
<meta name="viewport" content="width=device-width" />
<title>LED Control</title>
</head>
<body>
WEB PAGE ON PHP BASED GPIO Control:
<form method="get" action="gpio.php">
    <input type="submit" value="ON" name="on">
    <input type="submit" value="OFF" name="off">
</form>
<?php
$setmode17 = shell_exec("/usr/local/bin/gpio -g mode 2 out");
if (isset($_GET['on'])) {
    $gpio_on = shell_exec("/usr/local/bin/gpio -g write 2 1");
    echo "LED is on";
} else if (isset($_GET['off'])) {
    $gpio_off = shell_exec("/usr/local/bin/gpio -g write 2 0");
    echo "LED is off";
}
?>
</body>
</html>
           

WebPage Traffic Control using 3 lights
Copy Code
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>LED</title>
</head>
<body>
    <form method ="get" action ="web.php">
        <input type ="hidden" name ="led" value= "1">
        <button type="submit" name ="state" value="on">ON</button>
        <button type="submit" name ="state" value="off">OFF</button>
    </form>
    <form action="web.php" method ="get">
        <input type="hidden" name ="led" value = "2">
        <button type="submit" name ="state" value="on">ON</button>
        <button type="submit" name ="state" value="off">OFF</button>
    </form>
    <form action="web.php" method ="get">
        <input type="hidden" name ="led" value = "3">
        <button type="submit" name ="state" value="on">ON</button>
        <button type="submit" name ="state" value="off">OFF</button>
    </form>
    <?php
        if(isset($_GET['led']) && isset($_GET['state'])){
            $led = intval($_GET['led']);
            $state = $_GET['state'];
            if($led == 1)
            {
                $pin = 17;
            }
            else if($led == 2)
            {
                $pin = 27;
            }
            else if($led == 3)
            {
                $pin = 22;
            }
            if($state == "on")
            {
                $gpio_on = shell_exec("/usr/local/bin/gpio -g write $pin 1");
                echo "LED is on";
            }
            else if($state == "off")
            {
                $gpio_off = shell_exec("/usr/local/bin/gpio -g write $pin 0");
                echo "LED is off";
            }
        }
    ?>
</body>
</html>
        

Transfer a file from one bucket to the other using Lambda
Copy Code
import json
import boto3
import time

def lambda_handler(event, context):
    start_time = time.time()
    print(f"Received event: {json.dumps(event)}")

    source_bucket = event['source_bucket']
    destination_bucket = event['destination_bucket']
    file_key = event['file_key']

    s3 = boto3.client('s3')

    try:
        print(f"Starting file copy from {source_bucket} to {destination_bucket} for file: {file_key}")
        
        s3.copy_object(
            CopySource={'Bucket': source_bucket, 'Key': file_key},
            Bucket=destination_bucket,
            Key=file_key
        )

        elapsed_time = time.time() - start_time
        print(f"File copied successfully in {elapsed_time:.2f} seconds")
        
        return {
            'statusCode': 200,
            'body': json.dumps(f"File {file_key} transferred successfully in {elapsed_time:.2f} seconds.")
        }

    except Exception as e:
        print(f"Error copying file: {e}")
        return {
            'statusCode': 500,
            'body': json.dumps(f"Error copying file: {str(e)}")
        }
            
        
Above lambda function test json
Copy Code
test json:
{
    "source_bucket": "value",
    "destination_bucket": "value",
    "file_key": "value"
}


Aritmetic Cal using Lambda
Copy Code
export const handler = async (event) => {
    let {operation,num1,num2} = event;
    let result = 0;
    switch(operation) {
      case 1:
        result = num1 + num2;
        break;
      case 2:
        result = num1 - num2;
        break;
      case 3:
        result = num1 * num2;
        break;
      case 4:
        result = num1 / num2;
        break;
      default:
        result = -1;
        break;
    }
    
    const response = {
      statusCode: 200,
      body: result
    };
    return response;
  };
      

html file - Aritmetic Cal using Lambda continuation
Copy Code
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Arithmetic Operations</title>
</head>
<body>
    <h1>Perform Arithmetic Operations</h1>
    <form id="calcForm">
        <input type="number" id="num1" placeholder="Enter first number" required>
        <input type="number" id="num2" placeholder="Enter second number" required>
        <select id="operation">
            <option value="1">Add</option>
            <option value="2">Subtract</option>
            <option value="3">Multiply</option>
            <option value="4">Divide</option>
        </select>
        <button type="submit">Calculate</button>
    </form>
    <h2>Result: <span id="result">N/A</span></h2>
    <script>
        document.getElementById('calcForm').addEventListener('submit', async function (e) {
            e.preventDefault();

            const num1 = parseFloat(document.getElementById('num1').value);
            const num2 = parseFloat(document.getElementById('num2').value);
            const operation = parseInt(document.getElementById('operation').value);

            // Replace with your API Gateway URL
            const apiUrl = "<endpoint-of-api>";

            const response = await fetch(apiUrl, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ num1, num2, operation })
            });

            const result = await response.json();
            console.log(result);
            document.getElementById('result').textContent = result.body || 'Error';
        });
    </script>
</body>
</html>
            

SSH Command for AWS LINUX image
Copy Code
 SSH -i "your-key.pem" ec2-user@"Public ip address"


SSH Command for ubuntu image
Copy Code
 SSH -i "your-key.pem" ubuntu@"Public ip address"


Smart Parking System
Copy Code
import RPi.GPIO as GPIO
import time
import requests
import smtplib
from email.mime.text import MIMEText

GPIO.setmode(GPIO.BCM)

TRIG = 17
ECHO = 27
LED_RED = 23
LED_GREEN = 22

GPIO.setup(TRIG, GPIO.OUT)
GPIO.setup(ECHO, GPIO.IN)
GPIO.setup(LED_GREEN, GPIO.OUT)
GPIO.setup(LED_RED, GPIO.OUT)

api = "Api_key"
URL = "https://api.thingspeak.com/update"

smtp_server = "smtp.gmail.com"
port = 587
email = "Your_Email"
password = "Password(Key)"
receiver = "receiver_Email"
sent = False

def send():
    global sent
    if not sent:
        try:
            subject = "for checking"
            body = "Parking slot is occupied"
            msg = MIMEText(body)
            msg["Subject"] = subject
            msg["From"] = email
            msg["To"] = receiver

            server = smtplib.SMTP(smtp_server, port)
            server.starttls()
            server.login(email, password)
            server.sendmail(email, receiver, msg.as_string())
            server.quit()

            print("Email sent successfully")
            sent = True
        except Exception as e:
            print(e)

def measure():
    GPIO.output(TRIG, GPIO.LOW)
    time.sleep(0.1)
    GPIO.output(TRIG, GPIO.HIGH)
    time.sleep(0.00001)
    GPIO.output(TRIG, GPIO.LOW)

    while GPIO.input(ECHO) == GPIO.LOW:
        pulse_start = time.time()

    while GPIO.input(ECHO) == GPIO.HIGH:
        pulse_end = time.time()

    pulse_duration = pulse_end - pulse_start
    distance = pulse_duration * 17150
    return distance

def sendToThingSpeak(distance):
    payload = {"api_key": api, "field1": distance}
    try:
        response = requests.post(URL, data=payload)
        if response.status_code == 200:
            print("Data sent successfully")
        else:
            print(response.status_code)
    except Exception as e:
        print(e)

try:
    while True:
        distance = measure()
        print(distance)

        if distance < 100:
            GPIO.output(LED_RED, GPIO.HIGH)
            GPIO.output(LED_GREEN, GPIO.LOW)
            send()
            print("Parking space occupied")
        else:
            GPIO.output(LED_GREEN, GPIO.HIGH)
            GPIO.output(LED_RED, GPIO.LOW)
            print("Parking space available")

        sendToThingSpeak(distance)
        time.sleep(1)
except KeyboardInterrupt:
    GPIO.cleanup()
            